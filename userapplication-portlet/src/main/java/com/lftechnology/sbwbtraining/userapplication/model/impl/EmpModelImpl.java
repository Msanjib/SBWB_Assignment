package com.lftechnology.sbwbtraining.userapplication.model.impl;

import com.lftechnology.sbwbtraining.userapplication.model.Emp;
import com.lftechnology.sbwbtraining.userapplication.model.EmpModel;
import com.lftechnology.sbwbtraining.userapplication.model.EmpSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Emp service. Represents a row in the &quot;MO_Emp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lftechnology.sbwbtraining.userapplication.model.EmpModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmpImpl}.
 * </p>
 *
 * @author Bibhushan Joshi
 * @see EmpImpl
 * @see com.lftechnology.sbwbtraining.userapplication.model.Emp
 * @see com.lftechnology.sbwbtraining.userapplication.model.EmpModel
 * @generated
 */
@JSON(strict = true)
public class EmpModelImpl extends BaseModelImpl<Emp> implements EmpModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a emp model instance should use the {@link com.lftechnology.sbwbtraining.userapplication.model.Emp} interface instead.
     */
    public static final String TABLE_NAME = "MO_Emp";
    public static final Object[][] TABLE_COLUMNS = {
            { "userId", Types.BIGINT },
            { "firstName", Types.VARCHAR },
            { "lastName", Types.VARCHAR },
            { "address", Types.VARCHAR },
            { "phoneNumber", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "companyName", Types.VARCHAR },
            { "depId", Types.BIGINT },
            { "userDesc", Types.VARCHAR },
            { "status", Types.BOOLEAN },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table MO_Emp (userId LONG not null primary key,firstName VARCHAR(75) null,lastName VARCHAR(75) null,address VARCHAR(75) null,phoneNumber VARCHAR(75) null,email VARCHAR(75) null,companyName VARCHAR(75) null,depId LONG,userDesc VARCHAR(75) null,status BOOLEAN,companyId LONG,groupId LONG)";
    public static final String TABLE_SQL_DROP = "drop table MO_Emp";
    public static final String ORDER_BY_JPQL = " ORDER BY emp.firstName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY MO_Emp.firstName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.lftechnology.sbwbtraining.userapplication.model.Emp"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.lftechnology.sbwbtraining.userapplication.model.Emp"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.lftechnology.sbwbtraining.userapplication.model.Emp"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long COMPANYNAME_COLUMN_BITMASK = 2L;
    public static long DEPID_COLUMN_BITMASK = 4L;
    public static long FIRSTNAME_COLUMN_BITMASK = 8L;
    public static long GROUPID_COLUMN_BITMASK = 16L;
    public static long LASTNAME_COLUMN_BITMASK = 32L;
    public static long STATUS_COLUMN_BITMASK = 64L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.lftechnology.sbwbtraining.userapplication.model.Emp"));
    private static ClassLoader _classLoader = Emp.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Emp.class };
    private long _userId;
    private String _userUuid;
    private String _firstName;
    private String _originalFirstName;
    private String _lastName;
    private String _originalLastName;
    private String _address;
    private String _phoneNumber;
    private String _email;
    private String _companyName;
    private String _originalCompanyName;
    private long _depId;
    private long _originalDepId;
    private boolean _setOriginalDepId;
    private String _userDesc;
    private Boolean _status;
    private Boolean _originalStatus;
    private boolean _setOriginalStatus;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _columnBitmask;
    private Emp _escapedModel;

    public EmpModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Emp toModel(EmpSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Emp model = new EmpImpl();

        model.setUserId(soapModel.getUserId());
        model.setFirstName(soapModel.getFirstName());
        model.setLastName(soapModel.getLastName());
        model.setAddress(soapModel.getAddress());
        model.setPhoneNumber(soapModel.getPhoneNumber());
        model.setEmail(soapModel.getEmail());
        model.setCompanyName(soapModel.getCompanyName());
        model.setDepId(soapModel.getDepId());
        model.setUserDesc(soapModel.getUserDesc());
        model.setStatus(soapModel.getStatus());
        model.setCompanyId(soapModel.getCompanyId());
        model.setGroupId(soapModel.getGroupId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Emp> toModels(EmpSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Emp> models = new ArrayList<Emp>(soapModels.length);

        for (EmpSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _userId;
    }

    public void setPrimaryKey(long primaryKey) {
        setUserId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_userId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Emp.class;
    }

    public String getModelClassName() {
        return Emp.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("userId", getUserId());
        attributes.put("firstName", getFirstName());
        attributes.put("lastName", getLastName());
        attributes.put("address", getAddress());
        attributes.put("phoneNumber", getPhoneNumber());
        attributes.put("email", getEmail());
        attributes.put("companyName", getCompanyName());
        attributes.put("depId", getDepId());
        attributes.put("userDesc", getUserDesc());
        attributes.put("status", getStatus());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String firstName = (String) attributes.get("firstName");

        if (firstName != null) {
            setFirstName(firstName);
        }

        String lastName = (String) attributes.get("lastName");

        if (lastName != null) {
            setLastName(lastName);
        }

        String address = (String) attributes.get("address");

        if (address != null) {
            setAddress(address);
        }

        String phoneNumber = (String) attributes.get("phoneNumber");

        if (phoneNumber != null) {
            setPhoneNumber(phoneNumber);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String companyName = (String) attributes.get("companyName");

        if (companyName != null) {
            setCompanyName(companyName);
        }

        Long depId = (Long) attributes.get("depId");

        if (depId != null) {
            setDepId(depId);
        }

        String userDesc = (String) attributes.get("userDesc");

        if (userDesc != null) {
            setUserDesc(userDesc);
        }

        Boolean status = (Boolean) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }
    }

    @JSON
    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    public String getFirstName() {
        if (_firstName == null) {
            return StringPool.BLANK;
        } else {
            return _firstName;
        }
    }

    public void setFirstName(String firstName) {
        _columnBitmask = -1L;

        if (_originalFirstName == null) {
            _originalFirstName = _firstName;
        }

        _firstName = firstName;
    }

    public String getOriginalFirstName() {
        return GetterUtil.getString(_originalFirstName);
    }

    @JSON
    public String getLastName() {
        if (_lastName == null) {
            return StringPool.BLANK;
        } else {
            return _lastName;
        }
    }

    public void setLastName(String lastName) {
        _columnBitmask |= LASTNAME_COLUMN_BITMASK;

        if (_originalLastName == null) {
            _originalLastName = _lastName;
        }

        _lastName = lastName;
    }

    public String getOriginalLastName() {
        return GetterUtil.getString(_originalLastName);
    }

    @JSON
    public String getAddress() {
        if (_address == null) {
            return StringPool.BLANK;
        } else {
            return _address;
        }
    }

    public void setAddress(String address) {
        _address = address;
    }

    @JSON
    public String getPhoneNumber() {
        if (_phoneNumber == null) {
            return StringPool.BLANK;
        } else {
            return _phoneNumber;
        }
    }

    public void setPhoneNumber(String phoneNumber) {
        _phoneNumber = phoneNumber;
    }

    @JSON
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    public void setEmail(String email) {
        _email = email;
    }

    @JSON
    public String getCompanyName() {
        if (_companyName == null) {
            return StringPool.BLANK;
        } else {
            return _companyName;
        }
    }

    public void setCompanyName(String companyName) {
        _columnBitmask |= COMPANYNAME_COLUMN_BITMASK;

        if (_originalCompanyName == null) {
            _originalCompanyName = _companyName;
        }

        _companyName = companyName;
    }

    public String getOriginalCompanyName() {
        return GetterUtil.getString(_originalCompanyName);
    }

    @JSON
    public long getDepId() {
        return _depId;
    }

    public void setDepId(long depId) {
        _columnBitmask |= DEPID_COLUMN_BITMASK;

        if (!_setOriginalDepId) {
            _setOriginalDepId = true;

            _originalDepId = _depId;
        }

        _depId = depId;
    }

    public long getOriginalDepId() {
        return _originalDepId;
    }

    @JSON
    public String getUserDesc() {
        if (_userDesc == null) {
            return StringPool.BLANK;
        } else {
            return _userDesc;
        }
    }

    public void setUserDesc(String userDesc) {
        _userDesc = userDesc;
    }

    @JSON
    public Boolean getStatus() {
        return _status;
    }

    public void setStatus(Boolean status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (!_setOriginalStatus) {
            _setOriginalStatus = true;

            _originalStatus = _status;
        }

        _status = status;
    }

    public Boolean getOriginalStatus() {
        return _originalStatus;
    }

    @JSON
    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    public long getGroupId() {
        return _groupId;
    }

    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Emp.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Emp toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Emp) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    public Emp toUnescapedModel() {
        return (Emp) this;
    }

    @Override
    public Object clone() {
        EmpImpl empImpl = new EmpImpl();

        empImpl.setUserId(getUserId());
        empImpl.setFirstName(getFirstName());
        empImpl.setLastName(getLastName());
        empImpl.setAddress(getAddress());
        empImpl.setPhoneNumber(getPhoneNumber());
        empImpl.setEmail(getEmail());
        empImpl.setCompanyName(getCompanyName());
        empImpl.setDepId(getDepId());
        empImpl.setUserDesc(getUserDesc());
        empImpl.setStatus(getStatus());
        empImpl.setCompanyId(getCompanyId());
        empImpl.setGroupId(getGroupId());

        empImpl.resetOriginalValues();

        return empImpl;
    }

    public int compareTo(Emp emp) {
        int value = 0;

        value = getFirstName().compareTo(emp.getFirstName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Emp)) {
            return false;
        }

        Emp emp = (Emp) obj;

        long primaryKey = emp.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EmpModelImpl empModelImpl = this;

        empModelImpl._originalFirstName = empModelImpl._firstName;

        empModelImpl._originalLastName = empModelImpl._lastName;

        empModelImpl._originalCompanyName = empModelImpl._companyName;

        empModelImpl._originalDepId = empModelImpl._depId;

        empModelImpl._setOriginalDepId = false;

        empModelImpl._originalStatus = empModelImpl._status;

        empModelImpl._setOriginalStatus = false;

        empModelImpl._originalCompanyId = empModelImpl._companyId;

        empModelImpl._setOriginalCompanyId = false;

        empModelImpl._originalGroupId = empModelImpl._groupId;

        empModelImpl._setOriginalGroupId = false;

        empModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Emp> toCacheModel() {
        EmpCacheModel empCacheModel = new EmpCacheModel();

        empCacheModel.userId = getUserId();

        empCacheModel.firstName = getFirstName();

        String firstName = empCacheModel.firstName;

        if ((firstName != null) && (firstName.length() == 0)) {
            empCacheModel.firstName = null;
        }

        empCacheModel.lastName = getLastName();

        String lastName = empCacheModel.lastName;

        if ((lastName != null) && (lastName.length() == 0)) {
            empCacheModel.lastName = null;
        }

        empCacheModel.address = getAddress();

        String address = empCacheModel.address;

        if ((address != null) && (address.length() == 0)) {
            empCacheModel.address = null;
        }

        empCacheModel.phoneNumber = getPhoneNumber();

        String phoneNumber = empCacheModel.phoneNumber;

        if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
            empCacheModel.phoneNumber = null;
        }

        empCacheModel.email = getEmail();

        String email = empCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            empCacheModel.email = null;
        }

        empCacheModel.companyName = getCompanyName();

        String companyName = empCacheModel.companyName;

        if ((companyName != null) && (companyName.length() == 0)) {
            empCacheModel.companyName = null;
        }

        empCacheModel.depId = getDepId();

        empCacheModel.userDesc = getUserDesc();

        String userDesc = empCacheModel.userDesc;

        if ((userDesc != null) && (userDesc.length() == 0)) {
            empCacheModel.userDesc = null;
        }

        empCacheModel.status = getStatus();

        empCacheModel.companyId = getCompanyId();

        empCacheModel.groupId = getGroupId();

        return empCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{userId=");
        sb.append(getUserId());
        sb.append(", firstName=");
        sb.append(getFirstName());
        sb.append(", lastName=");
        sb.append(getLastName());
        sb.append(", address=");
        sb.append(getAddress());
        sb.append(", phoneNumber=");
        sb.append(getPhoneNumber());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", companyName=");
        sb.append(getCompanyName());
        sb.append(", depId=");
        sb.append(getDepId());
        sb.append(", userDesc=");
        sb.append(getUserDesc());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.lftechnology.sbwbtraining.userapplication.model.Emp");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstName</column-name><column-value><![CDATA[");
        sb.append(getFirstName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastName</column-name><column-value><![CDATA[");
        sb.append(getLastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>address</column-name><column-value><![CDATA[");
        sb.append(getAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>phoneNumber</column-name><column-value><![CDATA[");
        sb.append(getPhoneNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyName</column-name><column-value><![CDATA[");
        sb.append(getCompanyName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>depId</column-name><column-value><![CDATA[");
        sb.append(getDepId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userDesc</column-name><column-value><![CDATA[");
        sb.append(getUserDesc());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
