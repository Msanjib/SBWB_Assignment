package com.lftechnology.sbwbtraining.division.service.base;

import com.lftechnology.sbwbtraining.division.model.Division;
import com.lftechnology.sbwbtraining.division.service.DivisionLocalService;
import com.lftechnology.sbwbtraining.division.service.DivisionService;
import com.lftechnology.sbwbtraining.division.service.persistence.DivisionPersistence;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the division local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.lftechnology.sbwbtraining.division.service.impl.DivisionLocalServiceImpl}.
 * </p>
 *
 * @author Sanjib Maharjan
 * @see com.lftechnology.sbwbtraining.division.service.impl.DivisionLocalServiceImpl
 * @see com.lftechnology.sbwbtraining.division.service.DivisionLocalServiceUtil
 * @generated
 */
public abstract class DivisionLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements DivisionLocalService, IdentifiableBean {
    @BeanReference(type = DivisionLocalService.class)
    protected DivisionLocalService divisionLocalService;
    @BeanReference(type = DivisionService.class)
    protected DivisionService divisionService;
    @BeanReference(type = DivisionPersistence.class)
    protected DivisionPersistence divisionPersistence;
    @BeanReference(type = CounterLocalService.class)
    protected CounterLocalService counterLocalService;
    @BeanReference(type = ResourceLocalService.class)
    protected ResourceLocalService resourceLocalService;
    @BeanReference(type = ResourceService.class)
    protected ResourceService resourceService;
    @BeanReference(type = ResourcePersistence.class)
    protected ResourcePersistence resourcePersistence;
    @BeanReference(type = UserLocalService.class)
    protected UserLocalService userLocalService;
    @BeanReference(type = UserService.class)
    protected UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private DivisionLocalServiceClpInvoker _clpInvoker = new DivisionLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.lftechnology.sbwbtraining.division.service.DivisionLocalServiceUtil} to access the division local service.
     */

    /**
     * Adds the division to the database. Also notifies the appropriate model listeners.
     *
     * @param division the division
     * @return the division that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    public Division addDivision(Division division) throws SystemException {
        division.setNew(true);

        return divisionPersistence.update(division, false);
    }

    /**
     * Creates a new division with the primary key. Does not add the division to the database.
     *
     * @param divisionId the primary key for the new division
     * @return the new division
     */
    public Division createDivision(long divisionId) {
        return divisionPersistence.create(divisionId);
    }

    /**
     * Deletes the division with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param divisionId the primary key of the division
     * @return the division that was removed
     * @throws PortalException if a division with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    public Division deleteDivision(long divisionId)
        throws PortalException, SystemException {
        return divisionPersistence.remove(divisionId);
    }

    /**
     * Deletes the division from the database. Also notifies the appropriate model listeners.
     *
     * @param division the division
     * @return the division that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    public Division deleteDivision(Division division) throws SystemException {
        return divisionPersistence.remove(division);
    }

    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Division.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return divisionPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return divisionPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return divisionPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return divisionPersistence.countWithDynamicQuery(dynamicQuery);
    }

    public Division fetchDivision(long divisionId) throws SystemException {
        return divisionPersistence.fetchByPrimaryKey(divisionId);
    }

    /**
     * Returns the division with the primary key.
     *
     * @param divisionId the primary key of the division
     * @return the division
     * @throws PortalException if a division with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    public Division getDivision(long divisionId)
        throws PortalException, SystemException {
        return divisionPersistence.findByPrimaryKey(divisionId);
    }

    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return divisionPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the divisions.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param start the lower bound of the range of divisions
     * @param end the upper bound of the range of divisions (not inclusive)
     * @return the range of divisions
     * @throws SystemException if a system exception occurred
     */
    public List<Division> getDivisions(int start, int end)
        throws SystemException {
        return divisionPersistence.findAll(start, end);
    }

    /**
     * Returns the number of divisions.
     *
     * @return the number of divisions
     * @throws SystemException if a system exception occurred
     */
    public int getDivisionsCount() throws SystemException {
        return divisionPersistence.countAll();
    }

    /**
     * Updates the division in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param division the division
     * @return the division that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    public Division updateDivision(Division division) throws SystemException {
        return updateDivision(division, true);
    }

    /**
     * Updates the division in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param division the division
     * @param merge whether to merge the division with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
     * @return the division that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    public Division updateDivision(Division division, boolean merge)
        throws SystemException {
        division.setNew(false);

        return divisionPersistence.update(division, merge);
    }

    /**
     * Returns the division local service.
     *
     * @return the division local service
     */
    public DivisionLocalService getDivisionLocalService() {
        return divisionLocalService;
    }

    /**
     * Sets the division local service.
     *
     * @param divisionLocalService the division local service
     */
    public void setDivisionLocalService(
        DivisionLocalService divisionLocalService) {
        this.divisionLocalService = divisionLocalService;
    }

    /**
     * Returns the division remote service.
     *
     * @return the division remote service
     */
    public DivisionService getDivisionService() {
        return divisionService;
    }

    /**
     * Sets the division remote service.
     *
     * @param divisionService the division remote service
     */
    public void setDivisionService(DivisionService divisionService) {
        this.divisionService = divisionService;
    }

    /**
     * Returns the division persistence.
     *
     * @return the division persistence
     */
    public DivisionPersistence getDivisionPersistence() {
        return divisionPersistence;
    }

    /**
     * Sets the division persistence.
     *
     * @param divisionPersistence the division persistence
     */
    public void setDivisionPersistence(DivisionPersistence divisionPersistence) {
        this.divisionPersistence = divisionPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the resource remote service.
     *
     * @return the resource remote service
     */
    public ResourceService getResourceService() {
        return resourceService;
    }

    /**
     * Sets the resource remote service.
     *
     * @param resourceService the resource remote service
     */
    public void setResourceService(ResourceService resourceService) {
        this.resourceService = resourceService;
    }

    /**
     * Returns the resource persistence.
     *
     * @return the resource persistence
     */
    public ResourcePersistence getResourcePersistence() {
        return resourcePersistence;
    }

    /**
     * Sets the resource persistence.
     *
     * @param resourcePersistence the resource persistence
     */
    public void setResourcePersistence(ResourcePersistence resourcePersistence) {
        this.resourcePersistence = resourcePersistence;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.lftechnology.sbwbtraining.division.model.Division",
            divisionLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.lftechnology.sbwbtraining.division.model.Division");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Division.class;
    }

    protected String getModelClassName() {
        return Division.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = divisionPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
