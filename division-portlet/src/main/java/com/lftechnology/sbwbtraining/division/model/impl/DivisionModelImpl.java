package com.lftechnology.sbwbtraining.division.model.impl;

import com.lftechnology.sbwbtraining.division.model.Division;
import com.lftechnology.sbwbtraining.division.model.DivisionModel;
import com.lftechnology.sbwbtraining.division.model.DivisionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Division service. Represents a row in the &quot;MO_Division&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lftechnology.sbwbtraining.division.model.DivisionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DivisionImpl}.
 * </p>
 *
 * @author Sanjib Maharjan
 * @see DivisionImpl
 * @see com.lftechnology.sbwbtraining.division.model.Division
 * @see com.lftechnology.sbwbtraining.division.model.DivisionModel
 * @generated
 */
@JSON(strict = true)
public class DivisionModelImpl extends BaseModelImpl<Division>
    implements DivisionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a division model instance should use the {@link com.lftechnology.sbwbtraining.division.model.Division} interface instead.
     */
    public static final String TABLE_NAME = "MO_Division";
    public static final Object[][] TABLE_COLUMNS = {
            { "divisionId", Types.BIGINT },
            { "divisionName", Types.VARCHAR },
            { "createdBy", Types.VARCHAR },
            { "createdOn", Types.VARCHAR },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table MO_Division (divisionId LONG not null primary key,divisionName VARCHAR(75) null,createdBy VARCHAR(75) null,createdOn VARCHAR(75) null,companyId LONG,groupId LONG)";
    public static final String TABLE_SQL_DROP = "drop table MO_Division";
    public static final String ORDER_BY_JPQL = " ORDER BY division.divisionName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY MO_Division.divisionName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.lftechnology.sbwbtraining.division.model.Division"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.lftechnology.sbwbtraining.division.model.Division"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.lftechnology.sbwbtraining.division.model.Division"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long DIVISIONNAME_COLUMN_BITMASK = 2L;
    public static long GROUPID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.lftechnology.sbwbtraining.division.model.Division"));
    private static ClassLoader _classLoader = Division.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Division.class
        };
    private long _divisionId;
    private String _divisionName;
    private String _originalDivisionName;
    private String _createdBy;
    private String _createdOn;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _columnBitmask;
    private Division _escapedModel;

    public DivisionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Division toModel(DivisionSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Division model = new DivisionImpl();

        model.setDivisionId(soapModel.getDivisionId());
        model.setDivisionName(soapModel.getDivisionName());
        model.setCreatedBy(soapModel.getCreatedBy());
        model.setCreatedOn(soapModel.getCreatedOn());
        model.setCompanyId(soapModel.getCompanyId());
        model.setGroupId(soapModel.getGroupId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Division> toModels(DivisionSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Division> models = new ArrayList<Division>(soapModels.length);

        for (DivisionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _divisionId;
    }

    public void setPrimaryKey(long primaryKey) {
        setDivisionId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_divisionId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Division.class;
    }

    public String getModelClassName() {
        return Division.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("divisionId", getDivisionId());
        attributes.put("divisionName", getDivisionName());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("createdOn", getCreatedOn());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long divisionId = (Long) attributes.get("divisionId");

        if (divisionId != null) {
            setDivisionId(divisionId);
        }

        String divisionName = (String) attributes.get("divisionName");

        if (divisionName != null) {
            setDivisionName(divisionName);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        String createdOn = (String) attributes.get("createdOn");

        if (createdOn != null) {
            setCreatedOn(createdOn);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }
    }

    @JSON
    public long getDivisionId() {
        return _divisionId;
    }

    public void setDivisionId(long divisionId) {
        _divisionId = divisionId;
    }

    @JSON
    public String getDivisionName() {
        if (_divisionName == null) {
            return StringPool.BLANK;
        } else {
            return _divisionName;
        }
    }

    public void setDivisionName(String divisionName) {
        _columnBitmask = -1L;

        if (_originalDivisionName == null) {
            _originalDivisionName = _divisionName;
        }

        _divisionName = divisionName;
    }

    public String getOriginalDivisionName() {
        return GetterUtil.getString(_originalDivisionName);
    }

    @JSON
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @JSON
    public String getCreatedOn() {
        if (_createdOn == null) {
            return StringPool.BLANK;
        } else {
            return _createdOn;
        }
    }

    public void setCreatedOn(String createdOn) {
        _createdOn = createdOn;
    }

    @JSON
    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    public long getGroupId() {
        return _groupId;
    }

    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Division.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Division toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Division) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    public Division toUnescapedModel() {
        return (Division) this;
    }

    @Override
    public Object clone() {
        DivisionImpl divisionImpl = new DivisionImpl();

        divisionImpl.setDivisionId(getDivisionId());
        divisionImpl.setDivisionName(getDivisionName());
        divisionImpl.setCreatedBy(getCreatedBy());
        divisionImpl.setCreatedOn(getCreatedOn());
        divisionImpl.setCompanyId(getCompanyId());
        divisionImpl.setGroupId(getGroupId());

        divisionImpl.resetOriginalValues();

        return divisionImpl;
    }

    public int compareTo(Division division) {
        int value = 0;

        value = getDivisionName().compareTo(division.getDivisionName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Division)) {
            return false;
        }

        Division division = (Division) obj;

        long primaryKey = division.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        DivisionModelImpl divisionModelImpl = this;

        divisionModelImpl._originalDivisionName = divisionModelImpl._divisionName;

        divisionModelImpl._originalCompanyId = divisionModelImpl._companyId;

        divisionModelImpl._setOriginalCompanyId = false;

        divisionModelImpl._originalGroupId = divisionModelImpl._groupId;

        divisionModelImpl._setOriginalGroupId = false;

        divisionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Division> toCacheModel() {
        DivisionCacheModel divisionCacheModel = new DivisionCacheModel();

        divisionCacheModel.divisionId = getDivisionId();

        divisionCacheModel.divisionName = getDivisionName();

        String divisionName = divisionCacheModel.divisionName;

        if ((divisionName != null) && (divisionName.length() == 0)) {
            divisionCacheModel.divisionName = null;
        }

        divisionCacheModel.createdBy = getCreatedBy();

        String createdBy = divisionCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            divisionCacheModel.createdBy = null;
        }

        divisionCacheModel.createdOn = getCreatedOn();

        String createdOn = divisionCacheModel.createdOn;

        if ((createdOn != null) && (createdOn.length() == 0)) {
            divisionCacheModel.createdOn = null;
        }

        divisionCacheModel.companyId = getCompanyId();

        divisionCacheModel.groupId = getGroupId();

        return divisionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{divisionId=");
        sb.append(getDivisionId());
        sb.append(", divisionName=");
        sb.append(getDivisionName());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", createdOn=");
        sb.append(getCreatedOn());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.lftechnology.sbwbtraining.division.model.Division");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>divisionId</column-name><column-value><![CDATA[");
        sb.append(getDivisionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>divisionName</column-name><column-value><![CDATA[");
        sb.append(getDivisionName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdOn</column-name><column-value><![CDATA[");
        sb.append(getCreatedOn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
